#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;

uniform sampler2D refractionTexture;
uniform sampler2D reflectionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColor;
uniform float moveFactor;

const float distStrength = 0.0085;
const float shineDamper = 20.0;
const float reflectivity = 0.6;

void main(void) {

	vec2 NDC = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	vec2 reflectTextureCoords = vec2(NDC.x, -NDC.y);
	vec2 refractTextureCoords = vec2(NDC.x, NDC.y);
	
	float near = 0.1;
	float far = 1000.0;
	float depth = texture(depthMap, refractTextureCoords).r;
	float floorDist = 2.0 * near * far / (far + near - ( 2.0 * depth - 1.0) * (far - near));
	
	depth = gl_FragCoord.z;
	float waterDist = 2.0 * near * far / (far + near - ( 2.0 * depth - 1.0) * (far - near));
	
	float waterDepth = floorDist - waterDist;
	
	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * distStrength * clamp(waterDepth/20.0, 0.0, 1.0);
	
	reflectTextureCoords += totalDistortion;
	refractTextureCoords += totalDistortion;
	reflectTextureCoords.x = clamp(reflectTextureCoords.x, 0.001, 0.999);
	reflectTextureCoords.y = clamp(reflectTextureCoords.y, -0.999, -0.001);
	refractTextureCoords = clamp(refractTextureCoords, 0.001, 0.999);
	
	vec4 reflectColor = texture(reflectionTexture, reflectTextureCoords);
	vec4 refractColor = texture(refractionTexture, refractTextureCoords);
	
	vec4 normalMapColor = texture(normalMap, distortedTexCoords);
	vec3 normal = normalize(vec3(normalMapColor.r * 2.0 - 1.0, normalMapColor.b * 4.0, normalMapColor.g * 2.0 - 1.0));
	
	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = clamp(pow(dot(viewVector, normal), 0.50), 0.0, 1.0);
	

	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColor * specular * reflectivity * clamp(waterDepth/2.0, 0.0, 1.0);

	out_Color = mix(reflectColor, refractColor, refractiveFactor);
	out_Color = mix(out_Color, vec4(0.0, 0.3, 0.5, 1.0), 0.6) + vec4(specularHighlights, 0.0);
	out_Color.a = clamp(waterDepth/5.0, 0.0, 0.999);
}